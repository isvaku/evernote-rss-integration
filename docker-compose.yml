version: '3'
services:

    # flask:
    #     build:
    #         context: app
    #         dockerfile: Dockerfile
    #     container_name: flask
    #     image: isvaku/evernote-python3
    #     restart: unless-stopped
    #     environment:
    #         APP_ENV: "dev"
    #         APP_DEBUG: "True"
    #         APP_PORT: 5000
    #         IS_CHINA: "False"
    #         MONGODB_DATABASE: flaskdb
    #         MONGODB_USERNAME: flaskuser
    #         MONGODB_PASSWORD: password
    #         MONGODB_HOSTNAME: mongodb
    #         FLASK_SECRET_KEY: my-very-secret-key
    #         EVERNOTE_CONSUMER_KEY: your_evernote_consumer_key
    #         EVERNOTE_CONSUMER_SECRET: your_evernote_consumer_secret
    #     volumes:
    #         - appdata:/var/www
    #     depends_on:
    #         - mongodb
    #     networks:
    #         - frontend
    #         - backend

    node:
        build:
            context: app_node
            dockerfile: Dockerfile
        container_name: node
        image: isvaku/node-evernote-api
        restart: unless-stopped
        environment:
            PORT: 3000
            PROXY_PORT: 80
            PROXY_HOST: "localhost"
            HOST: "node"
            TOKEN_EXPIRETIME: 3600
            TOKEN_ISSUER: "isvaku"
            TOKEN_SECRET: "my-very-secret-key"
            SANDBOX: true
            CHINA: false
            API_CONSUMER_KEY: your_evernote_consumer_key
            API_CONSUMER_SECRET: your_evernote_consumer_secret
            MONGODB_PORT: 27017
            MONGODB_USERNAME: flaskuser
            MONGODB_PASSWORD: password
            MONGODB_HOSTNAME: mongodb
            MONGODB_DATABASE: flaskdb
        ports:
            - "9229:9229"
        volumes:
            - nodeappdata:/usr/app
        depends_on:
            - mongodb
        networks:
            - frontend
            - backend

    mongodb:
        image: mongo:4.0.8
        container_name: mongodb
        restart: unless-stopped
        command: mongod --auth
        environment:
            MONGO_INITDB_ROOT_USERNAME: mongodbuser
            MONGO_INITDB_ROOT_PASSWORD: your_mongodb_root_password
            MONGO_INITDB_DATABASE: flaskdb
            MONGODB_DATA_DIR: /data/db
            MONDODB_LOG_DIR: /dev/null
        volumes:
            - mongodbdata:/data/db
        networks:
            - backend

    webserver:
        build:
            context: nginx
            dockerfile: Dockerfile
        image: isvaku/nginx-webserver:latest
        container_name: webserver
        restart: unless-stopped
        environment:
            APP_ENV: "dev"
            APP_NAME: "webserver"
            APP_DEBUG: "false"
            SERVICE_NAME: "webserver"
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - nginxdata:/var/log/nginx
        depends_on:
            - node
        networks:
            - frontend

    cronserver:
        build:
            context: cron
            dockerfile: Dockerfile
        image: isvaku/cronserver
        container_name: cronserver
        restart: unless-stopped
        # volumes:
            # - crondata:/var/log
        depends_on: 
            - webserver
        networks: 
            - frontend

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge

volumes:
    mongodbdata:
        driver: local
    # appdata:
    #     driver: local
    nginxdata:
        driver: local
    nodeappdata:
        driver: local